pub struct Solution;

impl Solution {
    pub fn is_valid_sudoku(board: Vec<Vec<char>>) -> bool {
        todo!();
    }
}

#[cfg(test)]
mod tests {
    use crate::arrays_and_hashing::q36_valid_sudoku::Solution;

    /// Example 1:
    /// Input: board =
    /// [["5","3",".",".","7",".",".",".","."]
    /// ,["6",".",".","1","9","5",".",".","."]
    /// ,[".","9","8",".",".",".",".","6","."]
    /// ,["8",".",".",".","6",".",".",".","3"]
    /// ,["4",".",".","8",".","3",".",".","1"]
    /// ,["7",".",".",".","2",".",".",".","6"]
    /// ,[".","6",".",".",".",".","2","8","."]
    /// ,[".",".",".","4","1","9",".",".","5"]
    /// ,[".",".",".",".","8",".",".","7","9"]]
    /// Output: true
    #[test]
    fn test_is_valid_sudoku_example_1() {
        let board = vec![
            vec!['5', '3', '.', '.', '7', '.', '.', '.', '.'],
            vec!['6', '.', '.', '1', '9', '5', '.', '.', '.'],
            vec!['.', '9', '8', '.', '.', '.', '.', '6', '.'],
            vec!['8', '.', '.', '.', '6', '.', '.', '.', '3'],
            vec!['4', '.', '.', '8', '.', '3', '.', '.', '1'],
            vec!['7', '.', '.', '.', '2', '.', '.', '.', '6'],
            vec!['.', '6', '.', '.', '.', '.', '2', '8', '.'],
            vec!['.', '.', '.', '4', '1', '9', '.', '.', '5'],
            vec!['.', '.', '.', '.', '8', '.', '.', '7', '9'],
        ];
        assert!(Solution::is_valid_sudoku(board));
    }

    /// Example 2:
    /// Input: board =
    /// [["8","3",".",".","7",".",".",".","."]
    /// ,["6",".",".","1","9","5",".",".","."]
    /// ,[".","9","8",".",".",".",".","6","."]
    /// ,["8",".",".",".","6",".",".",".","3"]
    /// ,["4",".",".","8",".","3",".",".","1"]
    /// ,["7",".",".",".","2",".",".",".","6"]
    /// ,[".","6",".",".",".",".","2","8","."]
    /// ,[".",".",".","4","1","9",".",".","5"]
    /// ,[".",".",".",".","8",".",".","7","9"]]
    /// Output: false
    /// Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
    #[test]
    fn test_is_valid_sudoku_example_2() {
        let board = vec![
            vec!['8', '3', '.', '.', '7', '.', '.', '.', '.'],
            vec!['6', '.', '.', '1', '9', '5', '.', '.', '.'],
            vec!['.', '9', '8', '.', '.', '.', '.', '6', '.'],
            vec!['8', '.', '.', '.', '6', '.', '.', '.', '3'],
            vec!['4', '.', '.', '8', '.', '3', '.', '.', '1'],
            vec!['7', '.', '.', '.', '2', '.', '.', '.', '6'],
            vec!['.', '6', '.', '.', '.', '.', '2', '8', '.'],
            vec!['.', '.', '.', '4', '1', '9', '.', '.', '5'],
            vec!['.', '.', '.', '.', '8', '.', '.', '7', '9'],
        ];
        assert!(!Solution::is_valid_sudoku(board));
    }
}
